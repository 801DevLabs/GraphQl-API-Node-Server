### This file was autogenerated by Nexus 0.11.6
### Do not make changes to this file directly


type AggregateApartment {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Apartment {
  address: String
  city: String!
  id: ID!
  name: String!
  phone: String
}

type ApartmentConnection {
  aggregate: AggregateApartment!
  edges: [ApartmentEdge!]!
  pageInfo: PageInfo!
}

input ApartmentCreateInput {
  address: String
  city: String!
  name: String!
  phone: String
}

type ApartmentEdge {
  cursor: String!
  node: Apartment!
}

enum ApartmentOrderByInput {
  address_ASC
  address_DESC
  city_ASC
  city_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  phone_ASC
  phone_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input ApartmentUpdateInput {
  address: String
  city: String
  name: String
  phone: String
}

input ApartmentUpdateManyMutationInput {
  address: String
  city: String
  name: String
  phone: String
}

input ApartmentWhereInput {
  address: String
  address_contains: String
  address_ends_with: String
  address_gt: String
  address_gte: String
  address_in: [String!]
  address_lt: String
  address_lte: String
  address_not: String
  address_not_contains: String
  address_not_ends_with: String
  address_not_in: [String!]
  address_not_starts_with: String
  address_starts_with: String
  AND: [ApartmentWhereInput!]
  city: String
  city_contains: String
  city_ends_with: String
  city_gt: String
  city_gte: String
  city_in: [String!]
  city_lt: String
  city_lte: String
  city_not: String
  city_not_contains: String
  city_not_ends_with: String
  city_not_in: [String!]
  city_not_starts_with: String
  city_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [ApartmentWhereInput!]
  OR: [ApartmentWhereInput!]
  phone: String
  phone_contains: String
  phone_ends_with: String
  phone_gt: String
  phone_gte: String
  phone_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_not: String
  phone_not_contains: String
  phone_not_ends_with: String
  phone_not_in: [String!]
  phone_not_starts_with: String
  phone_starts_with: String
}

input ApartmentWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createApartment(data: ApartmentCreateInput!): Apartment!
  createUser(data: UserCreateInput!): User!
  deleteApartment(where: ApartmentWhereUniqueInput!): Apartment
  deleteManyApartments(where: ApartmentWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteUser(where: UserWhereUniqueInput!): User
  updateApartment(data: ApartmentUpdateInput!, where: ApartmentWhereUniqueInput!): Apartment
  updateManyApartments(data: ApartmentUpdateManyMutationInput!, where: ApartmentWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertApartment(create: ApartmentCreateInput!, update: ApartmentUpdateInput!, where: ApartmentWhereUniqueInput!): Apartment!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  apartment(where: ApartmentWhereUniqueInput!): Apartment
  apartments(after: String, before: String, first: Int, last: Int, orderBy: ApartmentOrderByInput, skip: Int, where: ApartmentWhereInput): [Apartment!]!
  apartmentsConnection(after: String, before: String, first: Int, last: Int, orderBy: ApartmentOrderByInput, skip: Int, where: ApartmentWhereInput): ApartmentConnection!
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  usersConnection(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): UserConnection!
}

type User {
  id: ID!
  name: String!
}

type UserConnection {
  aggregate: AggregateUser!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

input UserCreateInput {
  name: String!
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserUpdateInput {
  name: String
}

input UserUpdateManyMutationInput {
  name: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
